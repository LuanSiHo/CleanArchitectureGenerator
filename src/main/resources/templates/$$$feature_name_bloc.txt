import 'dart:async';

import 'package:equatable/equatable.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:$$$package_name/features/$$$feature_name/domain/entities/$$$feature_name_entity.dart';
import 'package:$$$package_name/features/$$$feature_name/domain/usecases/fetch_$$$feature_name_usecase.dart';

part '$$$feature_name_event.dart';
part '$$$feature_name_state.dart';

class $$$FeatureNameBloc extends Bloc<$$$FeatureNameEvent, $$$FeatureNameState> {
  final Fetch$$$FeatureNameUseCase fetch$$$FeatureNameUseCase;

  $$$FeatureNameBloc({
    @required Fetch$$$FeatureNameUseCase fetch$$$FeatureNameUseCase
  })  : this.fetch$$$FeatureNameUseCase = fetch$$$FeatureNameUseCase,
        super($$$FeatureNameState(status: $$$FeatureNameStateStatus.init));

  @override
  Stream<$$$FeatureNameState> mapEventToState($$$FeatureNameEvent event) async* {
    if (event is EventFetch$$$FeatureName) {
      yield* _handleFetchPD(event);
    }
  }

  Stream<$$$FeatureNameState> _handleFetchPD(EventFetch$$$FeatureName event) async* {
    yield state.copyWith(status: $$$FeatureNameStateStatus.showLoading);
    final result = await fetch$$$FeatureNameUseCase(Fetch$$$FeatureNameParam(id: event.id));
    yield state.copyWith(status: $$$FeatureNameStateStatus.hideLoading);
    yield result.fold(
      (failure) => state.copyWith(status: $$$FeatureNameStateStatus.loadedFailed, errorMessage: 'Có lỗi xảy ra. Vui lòng thử lại.'),
      (data) => state.copyWith(status: $$$FeatureNameStateStatus.loadedSuccess, detail: data)
    );
  }
}
